{"version":3,"sources":["Image.js","helpers.js","CharacterCard.js","App.js","serviceWorker.js","index.js"],"names":["Image","thumb","full","name","search","className","href","data-attribute","src","alt","PORTRAIT_SIZES","CharacterCard","data","thumbnail","path","extension","description","length","substring","App","useState","setData","loading","setLoading","offset","perPage","currentPage","pageState","setPageState","getData","a","fetch","response","ok","json","apiData","useEffect","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","e","selectedPage","selected","containerClassName","subContainerClassName","activeClassName","results","map","key","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8UAiBeA,MAdf,YAAuC,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KAC5B,OAAKF,GAGwC,IAAzCA,EAAMG,OAAO,uBACR,yBAAKC,UAAU,sBAGtB,uBAAGC,KAAMJ,EAAMK,iBAAe,OAC5B,yBAAKF,UAAU,QAAQG,IAAKP,EAAOQ,IAAKN,KAPnC,kDCLEO,EAKO,mB,OCqBLC,MArBf,YAAkC,IAATC,EAAQ,EAARA,KACvB,OAAKA,EAEH,yBAAKP,UAAU,kBACb,kBAAC,EAAD,CACEJ,MAAK,UAAKW,EAAKC,UAAUC,KAApB,YAA4BJ,EAA5B,YAA+DE,EAAKC,UAAUE,WACnFb,KAAI,UAAKU,EAAKC,UAAUC,KAApB,YAA4BF,EAAKC,UAAUE,WAC/CZ,KAAMS,EAAKT,OAEb,yBAAKE,UAAU,qBACb,wBAAIA,UAAU,mBAAmBO,EAAKT,MACtC,uBAAGE,UAAU,0BACVO,EAAKI,YAAYC,OAAS,IAA1B,UACML,EAAKI,YAAYE,UAAU,EAAG,KADpC,OAEGN,EAAKI,eAbC,M,OCyELG,MAvEf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNR,EADM,KACAS,EADA,OAEiBD,oBAAS,GAF1B,mBAENE,EAFM,KAEGC,EAFH,OAGqBH,mBAAS,CACzCI,OAAQ,EACRC,QAAS,GACTC,YAAa,IANF,mBAGNC,EAHM,KAGKC,EAHL,KAQPC,EAAO,uCAAG,gCAAAC,EAAA,6DACdP,GAAW,GADG,SAESQ,MAAM,GAAD,OAZhB,gDAYgB,6BACKJ,EAAUH,SAH7B,YAERQ,EAFQ,QAKDC,GALC,iCAMoBD,EAASE,OAN7B,gBAMEC,EANF,EAMJvB,KACRS,EAAQc,GACRZ,GAAW,GARC,4CAAH,qDA4Bb,OALAa,qBAAU,WACRP,MAEC,CAACF,IAEgB,IAAhBf,EAAKK,OACA,yBAAKZ,UAAU,WAAf,oBAGP,kBAAC,IAAD,KACE,yBAAKA,UAAU,UACb,kBAAC,IAAD,CACEgC,cAAe,OACfC,UAAW,OACXC,WAAY,MACZC,eAAgB,WAChBC,UAAWd,EAAUF,QACrBiB,qBAAsB,EACtBC,mBAAoB,EACpBC,aA9BgB,SAACC,GACvB,IAAMC,EAAeD,EAAEE,SACjBvB,EAASsB,EAAenB,EAAUF,QAExCG,EAAa,2BACRD,GADO,IAEVD,YAAaoB,EACbtB,OAAQA,MAwBJwB,mBAAoB,aACpBC,sBAAuB,mBACvBC,gBAAiB,YAGrB,kBAAC,IAAD,KACE,yBAAK7C,UAAU,WACXiB,EAKA,yBAAKjB,UAAU,WAAf,cAJAO,EAAKuC,QAAQC,KAAI,SAACP,GAChB,OAAO,kBAAC,EAAD,CAAejC,KAAMiC,EAAGQ,IAAKR,EAAES,YCxDhCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d74d1668.chunk.js","sourcesContent":["import React from 'react';\nimport './Image.css';\n\nfunction Image({ thumb, full, name }) {\n  if (!thumb) {\n    return <div>Loading image...</div>;\n  }\n  if (thumb.search('image_not_available') !== -1) {\n    return <div className=\"placeholer__image\"></div>;\n  }\n  return (\n    <a href={full} data-attribute=\"SRL\">\n      <img className=\"image\" src={thumb} alt={name} />\n    </a>\n  );\n}\n\nexport default Image;\n","export const PORTRAIT_SIZES = {\n  portrait_small: 'portrait_small',\n  portrait_medium: 'portrait_medium',\n  portrait_xlarge: 'portrait_xlarge',\n  portrait_fantastic: 'portrait_fantastic',\n  portrait_uncanny: 'portrait_uncanny',\n  portrait_incredible: 'portrait_incredible',\n  detail: 'detail',\n};\n","import React from 'react';\nimport Image from './Image';\nimport { PORTRAIT_SIZES } from './helpers';\nimport './CharacterCard.css';\n\nfunction CharacterCard({ data }) {\n  if (!data) return null;\n  return (\n    <div className=\"character-card\">\n      <Image\n        thumb={`${data.thumbnail.path}/${PORTRAIT_SIZES.portrait_uncanny}.${data.thumbnail.extension}`}\n        full={`${data.thumbnail.path}.${data.thumbnail.extension}`}\n        name={data.name}\n      />\n      <div className=\"character_details\">\n        <h1 className=\"character__name\">{data.name}</h1>\n        <p className=\"character__description\">\n          {data.description.length > 100\n            ? `${data.description.substring(0, 100)}...`\n            : data.description}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default CharacterCard;\n","import React, { useEffect, useState } from 'react';\nimport SimpleReactLightbox, { SRLWrapper } from 'simple-react-lightbox';\nimport ReactPaginate from 'react-paginate';\nimport CharacterCard from './CharacterCard';\nimport './App.css';\n\nconst baseURL = 'https://marvel-apiproxy.herokuapp.com/api/v1/';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [pageState, setPageState] = useState({\n    offset: 0,\n    perPage: 20,\n    currentPage: 0,\n  });\n  const getData = async () => {\n    setLoading(true);\n    const response = await fetch(\n      `${baseURL}characters?offset=${pageState.offset}`\n    );\n    if (response.ok) {\n      const { data: apiData } = await response.json();\n      setData(apiData);\n      setLoading(false);\n    }\n  };\n\n  const handlePageClick = (e) => {\n    const selectedPage = e.selected;\n    const offset = selectedPage * pageState.perPage;\n\n    setPageState({\n      ...pageState,\n      currentPage: selectedPage,\n      offset: offset,\n    });\n  };\n\n  useEffect(() => {\n    getData();\n    //eslint-disable-next-line\n  }, [pageState]);\n\n  if (data.length === 0) {\n    return <div className=\"loading\">Fetching Data...</div>;\n  }\n  return (\n    <SimpleReactLightbox>\n      <div className=\"paging\">\n        <ReactPaginate\n          previousLabel={'prev'}\n          nextLabel={'next'}\n          breakLabel={'...'}\n          breakClassName={'break-me'}\n          pageCount={pageState.perPage}\n          marginPagesDisplayed={2}\n          pageRangeDisplayed={5}\n          onPageChange={handlePageClick}\n          containerClassName={'pagination'}\n          subContainerClassName={'pages pagination'}\n          activeClassName={'active'}\n        />\n      </div>\n      <SRLWrapper>\n        <div className=\"wrapper\">\n          {!loading ? (\n            data.results.map((e) => {\n              return <CharacterCard data={e} key={e.id} />;\n            })\n          ) : (\n            <div className=\"loading\">Loading...</div>\n          )}\n        </div>\n      </SRLWrapper>\n    </SimpleReactLightbox>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './minireset.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}